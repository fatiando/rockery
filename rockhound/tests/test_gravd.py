"""
Test functions for GRAV-D fetch function
"""
import os
import pytest
import numpy.testing as npt

from .. import fetch_gravd
from ..gravd import BLOCKS


BOUNDARIES = {
    "AN01": (-159.080236, -148.492864, 63.329540, 66.549419),
    "AN02": (-149.458356, -144.128080, 63.610352, 66.254047),
    "AN03": (-144.660292, -142.932348, 63.455573, 66.778777),
    "AN04": (-143.099488, -137.156420, 63.597569, 66.553571),
    "AN05": (-151.427572, -137.363460, 66.234234, 72.317644),
    "AN06": (-164.622466, -149.453345, 69.173464, 72.243286),
    "AN07": (-160.757179, -147.343180, 65.615297, 69.757594),
    "AN08": (-167.621305, -157.456711, 64.238457, 69.728921),
    "AN09": (-169.435206, -156.991195, 59.665223, 66.633386),
    "AS01": (-156.543854, -146.035675, 57.145948, 62.572570),
    "AS02": (-157.843664, -148.684487, 60.094743, 63.715205),
    "AS03": (-150.176643, -138.706290, 59.372444, 63.723642),
    "AS04": (-146.634469, -130.746651, 55.345213, 63.984930),
    "AS05": (-137.131586, -125.911784, 52.328502, 59.418044),
    "AS06": (-169.396892, -152.931134, 57.053341, 61.765685),
    "AS07": (-153.667958, -144.994163, 55.855000, 59.603674),
    "AS08": (-163.038329, -149.837265, 53.523342, 58.995713),
    "AS09": (-168.307350, -154.581708, 52.383099, 57.299887),
    "TS01": (-68.066315, -64.165056, 16.682771, 21.027700),
    "CN01": (-97.693974, -84.148813, 45.521668, 50.927281),
    "CN02": (-97.253994, -88.807584, 39.956389, 43.096959),
    "CN03": (-102.963738, -95.878181, 40.090752, 43.018882),
    "CN04": (-94.811785, -88.592987, 42.745342, 46.523483),
    "CN05": (-100.429898, -93.606511, 42.948304, 46.327465),
    "CS01": (-87.900571, -87.000764, 27.069470, 31.523501),
    "CS02": (-94.144724, -88.202844, 26.861510, 31.562569),
    "CS03": (-96.546164, -92.582020, 26.677067, 31.604803),
    "CS04": (-98.905366, -95.600115, 25.215287, 31.558737),
    "CS05": (-102.099463, -98.307264, 24.986960, 31.968193),
    "CS06": (-102.019678, -96.082696, 30.027194, 33.585270),
    "CS07": (-106.504982, -101.890954, 27.354698, 35.119381),
    "CS08": (-90.185730, -85.198280, 27.174820, 31.932650),
    "CS09": (-102.653080, -95.500875, 32.915921, 36.880509),
    "EN01": (-80.600222, -75.189514, 42.782200, 45.323999),
    "EN02": (-84.508527, -77.993550, 40.400352, 43.246978),
    "EN03": (-89.192686, -83.840602, 40.702260, 46.367761),
    "EN04": (-83.959450, -79.426173, 42.780554, 47.572323),
    "EN05": (-93.092630, -83.078206, 46.042449, 49.241472),
    "EN06": (-70.875790, -64.123823, 39.635154, 46.289471),
    "EN07": (-73.627370, -65.781950, 43.750377, 49.196317),
    "EN08": (-76.985013, -70.247598, 41.469297, 47.326297),
    "EN09": (-73.699600, -69.071636, 38.496209, 43.443788),
    "EN10": (-79.003047, -72.448146, 39.806532, 43.076560),
    "ES01": (-80.906272, -76.028415, 23.382628, 27.357924),
    "ES02": (-85.652745, -78.180259, 23.800560, 27.514886),
    "ES03": (-79.366993, -71.764439, 36.822935, 40.463078),
    "ES04": (-81.310419, -73.723052, 33.637659, 37.564264),
    "ES05": (-81.268731, -75.519154, 26.911828, 31.167317),
    "ES06": (-85.992528, -80.364237, 27.085069, 31.352347),
    "ES07": (-83.486039, -75.056032, 30.672635, 34.165371),
    "MS01": (-109.832665, -100.907623, 31.810696, 35.134912),
    "MS02": (-111.678698, -105.602956, 29.733733, 32.144605),
    "MS03": (-116.084658, -110.769606, 29.709600, 33.165590),
    "MS04": (-113.848971, -108.588446, 31.772328, 37.471949),
    "MS05": (-109.164368, -101.366075, 34.671194, 38.523827),
    "PN01": (-125.548347, -119.493706, 37.710754, 43.773405),
    "PN02": (-127.187380, -120.167662, 43.341232, 50.488790),
    "PN03": (-121.716993, -116.175117, 45.209430, 50.855215),
    "PS01": (-125.033609, -116.919767, 33.577816, 38.531522),
    "PS02": (-120.287597, -114.442984, 31.001945, 32.953557),
}

HEIGHT = {
    "AN01": (3730.1213, 4260.5893),
    "AN02": (5779.0819, 6455.7782),
    "AN03": (5786.5221, 6130.7890),
    "AN04": (6019.8640, 6379.8419),
    "AN05": (5540.8644, 5994.2796),
    "AN06": (5683.7640, 6170.5610),
    "AN07": (5713.4010, 7672.2800),
    "AN08": (5889.0400, 7605.4200),
    "AN09": (6232.8100, 8272.0930),
    "AS01": (10473.4066, 11066.5193),
    "AS02": (6044.8567, 7635.5811),
    "AS03": (6070.0640, 7368.2996),
    "AS04": (5982.9780, 7641.2930),
    "AS05": (5939.1440, 8161.3440),
    "AS06": (5809.3270, 6983.6080),
    "AS07": (6384.8540, 7276.9440),
    "AS08": (6493.1330, 7304.8860),
    "AS09": (5742.3410, 7372.9660),
    "TS01": (11137.2427, 11304.9441),
    "CN01": (5676.3740, 7192.4500),
    "CN02": (5897.4580, 7121.5210),
    "CN03": (6307.5030, 7066.5780),
    "CN04": (6100.8540, 7057.0420),
    "CN05": (5813.3190, 7031.6800),
    "CS01": (6216.8490, 6417.1800),
    "CS02": (10747.3705, 11267.4746),
    "CS03": (10803.9145, 11176.2130),
    "CS04": (10916.1446, 11269.4450),
    "CS05": (6235.9080, 7035.9080),
    "CS06": (5776.1340, 6669.9810),
    "CS07": (6299.1500, 7076.9060),
    "CS08": (10503.6080, 11164.5080),
    "CS09": (4745.1380, 7112.3880),
    "EN01": (6095.1201, 6327.9304),
    "EN02": (6054.0840, 6433.7636),
    "EN03": (5872.4110, 7324.6000),
    "EN04": (6008.9830, 7049.7670),
    "EN05": (5800.2340, 6964.0950),
    "EN06": (5845.4060, 6722.3690),
    "EN07": (5947.0410, 7453.2380),
    "EN08": (5330.2540, 5600.3840),
    "EN09": (6005.8870, 7073.3970),
    "EN10": (5032.8880, 5504.1730),
    "ES01": (6243.1380, 6416.4470),
    "ES02": (6285.5500, 6415.1960),
    "ES03": (5223.4420, 6089.1850),
    "ES04": (5192.1330, 5642.7770),
    "ES05": (5626.0010, 6708.7580),
    "ES06": (6265.8160, 7428.9990),
    "ES07": (6263.9000, 6488.0610),
    "MS01": (6115.2850, 7435.8650),
    "MS02": (6301.7260, 7001.0110),
    "MS03": (6242.7540, 6932.0320),
    "MS04": (5753.5620, 7104.0400),
    "MS05": (5208.7680, 7291.7770),
    "PN01": (6134.9276, 7549.0672),
    "PN02": (5900.6280, 7398.6560),
    "PN03": (6791.7600, 7633.5230),
    "PS01": (6052.8790, 7568.2710),
    "PS02": (5950.2850, 7381.4070),
}

GRAVITY = {
    "AN01": (980912.48, 981236.14),
    "AN02": (980245.06, 980611.52),
    "AN03": (980299.55, 980627.54),
    "AN04": (980289.03, 980576.43),
    "AN05": (980551.44, 980971.47),
    "AN06": (980690.48, 981005.28),
    "AN07": (980007.04, 980837.26),
    "AN08": (979962.65, 980760.79),
    "AN09": (979504.62, 980343.16),
    "AS01": (978338.57, 978970.16),
    "AS02": (979785.94, 980339.95),
    "AS03": (979621.35, 980455.47),
    "AS04": (977753.95, 981517.06),
    "AS05": (978898.50, 979758.41),
    "AS06": (979604.83, 980199.52),
    "AS07": (979285.23, 979878.49),
    "AS08": (979273.03, 979835.42),
    "AS09": (979047.16, 979926.07),
    "TS01": (974837.80, 975249.72),
    "CN01": (978259.48, 979368.81),
    "CN02": (977946.66, 978582.00),
    "CN03": (978014.25, 978489.90),
    "CN04": (978204.44, 978872.62),
    "CN05": (978258.28, 978917.74),
    "CS01": (977110.86, 977494.65),
    "CS02": (975608.79, 976076.17),
    "CS03": (975578.71, 976092.07),
    "CS04": (975482.26, 976065.18),
    "CS05": (976776.00, 977475.52),
    "CS06": (977291.76, 977766.94),
    "CS07": (976946.56, 977603.96),
    "CS08": (975621.79, 976203.99),
    "CS09": (977327.55, 978426.99),
    "EN01": (978444.09, 978711.12),
    "EN02": (978266.27, 978505.31),
    "EN03": (977955.06, 978945.52),
    "EN04": (978237.47, 978977.04),
    "EN05": (978754.29, 979165.14),
    "EN06": (978067.07, 978832.98),
    "EN07": (978276.47, 979098.57),
    "EN08": (978593.68, 979149.21),
    "EN09": (977820.07, 978565.80),
    "EN10": (978465.77, 978812.79),
    "ES01": (976832.60, 977208.40),
    "ES02": (976847.77, 977205.57),
    "ES03": (977999.26, 978569.19),
    "ES04": (977264.40, 978346.93),
    "ES05": (977102.42, 977560.88),
    "ES06": (977098.55, 977487.66),
    "ES07": (977339.48, 977731.51),
    "MS01": (977237.42, 977863.70),
    "MS02": (977133.58, 977491.14),
    "MS03": (977243.02, 977602.41),
    "MS04": (977266.46, 978182.13),
    "MS05": (977574.60, 978512.48),
    "PN01": (977613.13, 978625.78),
    "PN02": (978197.19, 979294.74),
    "PN03": (978363.30, 979058.16),
    "PS01": (977247.91, 978138.44),
    "PS02": (977098.97, 977750.94),
}


def test_gravd_boundaries():
    """
    Test geographic boundaries per block
    """
    for block in BLOCKS:
        dataframe = fetch_gravd(block=block)
        npt.assert_allclose(dataframe.longitude.min(), BOUNDARIES[block][0])
        npt.assert_allclose(dataframe.longitude.max(), BOUNDARIES[block][1])
        npt.assert_allclose(dataframe.latitude.min(), BOUNDARIES[block][2])
        npt.assert_allclose(dataframe.latitude.max(), BOUNDARIES[block][3])


def test_gravd_height():
    """
    Test minimum and maximum observation heights per block
    """
    for block in BLOCKS:
        dataframe = fetch_gravd(block=block)
        npt.assert_allclose(dataframe.height.min(), HEIGHT[block][0])
        npt.assert_allclose(dataframe.height.max(), HEIGHT[block][1])


def test_gravd_gravity():
    """
    Test minimum and maximum observed gravity per block
    """
    for block in BLOCKS:
        dataframe = fetch_gravd(block=block)
        npt.assert_allclose(dataframe.gravity.min(), GRAVITY[block][0])
        npt.assert_allclose(dataframe.gravity.max(), GRAVITY[block][1])


def test_gravd_invalid_zone():
    """
    Test if error is raised after invalid zone
    """
    with pytest.raises(ValueError):
        fetch_gravd(zone="this is not a valid zone")


def test_gravd_invalid_block():
    """
    Test if error is raised after invalid block
    """
    with pytest.raises(ValueError):
        fetch_gravd(block="this is not a valid block")


def test_gravd_zone_and_block():
    """
    Test if error is raised after passing a zone and a block
    """
    with pytest.raises(ValueError):
        fetch_gravd(zone="Alaska North", block="AN01")


def test_gravd_no_zone_nor_block():
    """
    Test if error is raised if no zone nor block is passed
    """
    with pytest.raises(ValueError):
        fetch_gravd()


def test_gravd_file_name_only():
    """
    Fetch only the file name
    """
    for block in BLOCKS:
        fname = fetch_gravd(block=block, load=False)
        assert type(fname) == list
